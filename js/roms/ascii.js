/**
 * Generates an 8x8 pixel font ROM for the 7-bit ASCII character set (0-127).
 * Each character is represented by 8 bytes, where each byte corresponds to a row of pixels.
 * Bit 7 is the leftmost pixel, Bit 0 is the rightmost pixel.
 * The ROM stores the bitmap data sequentially for each character code.
 * Character 'A' (0x41) bitmap data starts at address 0x41 * 8.
 */
import { fontBitmapsSymbols } from './ascii-symbols.js'; // Import symbol bitmaps
import { CHAR_HEIGHT, FONT_ROM_SIZE, NUM_CHARS as CONST_NUM_CHARS } from '../constants.js'; // Import constants

// Use NUM_CHARS from constants if defined, otherwise keep local (though they should match)
const NUM_CHARS = CONST_NUM_CHARS || 128; // 0x00 to 0x7F

// --- Source Bitmap Data (8 bytes per character) ---
// Define bitmaps here. 0 = background, 1 = foreground pixel.
// Example: 0b01111110 means pixels _#######_ (where # is foreground)
const fontBitmaps = {
    // Index by ASCII code
    0x20: [ // Space
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
    ],
    0x41: [ // 'A'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111110, //  #######
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x42: [ // 'B'
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b00000000, //
    ],
    0x43: [ // 'C'
        0b00111110, //   ######
        0b01100010, //  ##    ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100010, //  ##    ##
        0b00111110, //   ######
        0b00000000, //
    ],
    0x44: [ // 'D'
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b00000000, //
    ],
    0x45: [ // 'E'
        0b01111110, //  #######
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111100, //  #####
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111110, //  #######
        0b00000000, //
    ],
    0x46: [ // 'F'
        0b01111110, //  #######
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111100, //  #####
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b00000000, //
    ],
    0x47: [ // 'G'
        0b00111110, //   ######
        0b01100010, //  ##    ##
        0b01100000, //  ##
        0b01101110, //  ## ####
        0b01100010, //  ##    ##
        0b01100010, //  ##    ##
        0b00111110, //   ######
        0b00000000, //
    ],
    0x48: [ // 'H'
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111110, //  #######
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x49: [ // 'I'
        0b00111110, //   ######
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00111110, //   ######
        0b00000000, //
    ],
    0x4A: [ // 'J'
        0b00001110, //     ####
        0b00000110, //      ##
        0b00000110, //      ##
        0b00000110, //      ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x4B: [ // 'K'
        0b01100110, //  ##  ##
        0b01101100, //  ## ##
        0b01111000, //  ####
        0b01111000, //  ####
        0b01101100, //  ## ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x4C: [ // 'L'
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111110, //  #######
        0b00000000, //
    ],
    0x4D: [ // 'M'
        0b11000011, // ##    ##
        0b11100111, // ###  ###
        0b11111111, // #########
        0b11011011, // ## ## ##
        0b11000011, // ##    ##
        0b11000011, // ##    ##
        0b11000011, // ##    ##
        0b00000000, //
    ],
    0x4E: [ // 'N'
        0b01100110, //  ##  ##
        0b01110110, //  ### ##
        0b01111110, //  ######
        0b01101110, //  ## ###
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x4F: [ // 'O'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x50: [ // 'P'
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b00000000, //
    ],
    0x51: [ // 'Q'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01101110, //  ## ###
        0b01100110, //  ##  ##
        0b00111101, //   #### #
        0b00000011, //      ##
    ],
    0x52: [ // 'R'
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b01101100, //  ## ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x53: [ // 'S'
        0b00111110, //   ######
        0b01100010, //  ##    ##
        0b01100000, //  ##
        0b00111100, //   ####
        0b00000110, //      ##
        0b01000110, //  #   ##
        0b01111100, //  ######
        0b00000000, //
    ],
    0x54: [ // 'T'
        0b01111110, //  #######
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00011000, //     ##
        0b00000000, //
    ],
    0x55: [ // 'U'
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x56: [ // 'V'
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00011000, //    ##
        0b00000000, //
    ],
    0x57: [ // 'W'
        0b11000011, // ##    ##
        0b11000011, // ##    ##
        0b11000011, // ##    ##
        0b11011011, // ## ## ##
        0b11111111, // #########
        0b01110111, //  ### ###
        0b01100011, //  ##   ##
        0b00000000, //
    ],
    0x58: [ // 'X'
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00011000, //    ##
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x59: [ // 'Y'
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00000000, //
    ],
    0x5A: [ // 'Z'
        0b01111110, //  #######
        0b00000110, //      ##
        0b00001100, //     ##
        0b00011000, //    ##
        0b00110000, //   ##
        0b01100000, //  ##
        0b01111110, //  #######
        0b00000000, //
    ],
    // Digits
    0x30: [ // '0'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01101110, //  ## ###
        0b01110110, //  #### ##
        0b01111010, //  ##### #
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x31: [ // '1'
        0b00011000, //    ##
        0b00111000, //   ###
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x32: [ // '2'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b00000110, //      ##
        0b00011100, //    ###
        0b00110000, //   ##
        0b01100000, //  ##
        0b01111110, //  #######
        0b00000000, //
    ],
    0x33: [ // '3'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b00000110, //      ##
        0b00111100, //   ####
        0b00000110, //      ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x34: [ // '4'
        0b00001100, //     ##
        0b00011100, //    ###
        0b00101100, //   # ##
        0b01001100, //  #  ##
        0b01111110, //  #######
        0b00001100, //     ##
        0b00001100, //     ##
        0b00000000, //
    ],
    0x35: [ // '5'
        0b01111110, //  #######
        0b01100000, //  ##
        0b01111100, //  #####
        0b00000110, //      ##
        0b00000110, //      ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x36: [ // '6'
        0b00111100, //   ####
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x37: [ // '7'
        0b01111110, //  #######
        0b00000110, //      ##
        0b00001100, //     ##
        0b00011000, //    ##
        0b00110000, //   ##
        0b00110000, //   ##
        0b00110000, //   ##
        0b00000000, //
    ],
    0x38: [ // '8'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x39: [ // '9'
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000110, //      ##
        0b00000110, //      ##
        0b00111100, //   ####
        0b00000000, //
    ],

    // Lowercase Letters
    0x61: [ // 'a'
        0b00000000, //
        0b00000000, //
        0b00111100, //   ####
        0b00000110, //      ##
        0b00111110, //   #####
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000000, //
    ],
    0x62: [ // 'b'
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b00000000, //
    ],
    0x63: [ // 'c'
        0b00000000, //
        0b00000000, //
        0b00111100, //   ####
        0b01100010, //  ##   #
        0b01100000, //  ##
        0b01100010, //  ##   #
        0b00111100, //   ####
        0b00000000, //
    ],
    0x64: [ // 'd'
        0b00000110, //      ##
        0b00000110, //      ##
        0b00111110, //   #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000000, //
    ],
    0x65: [ // 'e'
        0b00000000, //
        0b00000000, //
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01111110, //  #######
        0b01100000, //  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x66: [ // 'f'
        0b00011100, //    ###
        0b00110110, //   ## ##
        0b00110000, //   ##
        0b01111000, //  ####
        0b00110000, //   ##
        0b00110000, //   ##
        0b00110000, //   ##
        0b00000000, //
    ],
    0x67: [ // 'g'
        0b00000000, //
        0b00111110, //   #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000110, //      ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
    ],
    0x68: [ // 'h'
        0b01100000, //  ##
        0b01100000, //  ##
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x69: [ // 'i'
        0b00011000, //    ##
        0b00000000, //
        0b00111000, //   ###
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x6A: [ // 'j'
        0b00001100, //     ##
        0b00000000, //
        0b00011100, //    ###
        0b00001100, //     ##
        0b00001100, //     ##
        0b01101100, //  ## ##
        0b01101100, //  ## ##
        0b00111000, //   ###
    ],
    0x6B: [ // 'k'
        0b01100000, //  ##
        0b01100000, //  ##
        0b01101100, //  ## ##
        0b01111000, //  ####
        0b01111000, //  ####
        0b01101100, //  ## ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x6C: [ // 'l'
        0b00111000, //   ###
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x6D: [ // 'm'
        0b00000000, //
        0b00000000, //
        0b11011010, // ## ## #
        0b11101110, // ### ###
        0b11101110, // ### ###
        0b11001100, // ##  ##
        0b11001100, // ##  ##
        0b00000000, //
    ],
    0x6E: [ // 'n'
        0b00000000, //
        0b00000000, //
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x6F: [ // 'o'
        0b00000000, //
        0b00000000, //
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00000000, //
    ],
    0x70: [ // 'p'
        0b00000000, //
        0b01111100, //  #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01111100, //  #####
        0b01100000, //  ##
        0b01100000, //  ##
        0b00000000, //
    ],
    0x71: [ // 'q'
        0b00000000, //
        0b00111110, //   #####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000110, //      ##
        0b00000110, //      ##
        0b00000000, //
    ],
    0x72: [ // 'r'
        0b00000000, //
        0b00000000, //
        0b01101100, //  ## ##
        0b01110010, //  ###  #
        0b01100000, //  ##
        0b01100000, //  ##
        0b01100000, //  ##
        0b00000000, //
    ],
    0x73: [ // 's'
        0b00000000, //
        0b00000000, //
        0b00111100, //   ####
        0b01100000, //  ##
        0b00111000, //   ###
        0b00000110, //      ##
        0b01111100, //  ######
        0b00000000, //
    ],
    0x74: [ // 't'
        0b00011000, //    ##
        0b00111000, //   ###
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011000, //    ##
        0b00011010, //    ## #
        0b00001100, //     ##
        0b00000000, //
    ],
    0x75: [ // 'u'
        0b00000000, //
        0b00000000, //
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01101110, //  ## ###
        0b00111100, //   ####
        0b00000000, //
    ],
    0x76: [ // 'v'
        0b00000000, //
        0b00000000, //
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00011000, //    ##
        0b00000000, //
    ],
    0x77: [ // 'w'
        0b00000000, //
        0b00000000, //
        0b11000110, // ##   ##
        0b11000110, // ##   ##
        0b11011110, // ## ####
        0b11101110, // ### ###
        0b01101100, //  ## ##
        0b00000000, //
    ],
    0x78: [ // 'x'
        0b00000000, //
        0b00000000, //
        0b01100110, //  ##  ##
        0b00111100, //   ####
        0b00111100, //   ####
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00000000, //
    ],
    0x79: [ // 'y'
        0b00000000, //
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b01100110, //  ##  ##
        0b00111110, //   #####
        0b00000110, //      ##
        0b01100110, //  ##  ##
        0b00111100, //   ####
    ],
    0x7A: [ // 'z'
        0b00000000, //
        0b00000000, //
        0b01111110, //  #######
        0b00001100, //     ##
        0b00110000, //   ##
        0b01100000, //  ##
        0b01111110, //  #######
        0b00000000, //
    ],

    // Merge symbol bitmaps
    ...fontBitmapsSymbols,

    // ... Add bitmaps for any remaining characters (0x00 - 0x1F, 0x7F control codes) if needed ...
    // Characters not defined will default to 0 (blank)
};

/**
 * Creates an array representing the 8x8 ASCII Font ROM.
 * @returns {Uint8Array} An array containing the bitmap data.
 */
function generateAsciiFontRom() {
    const romData = new Uint8Array(FONT_ROM_SIZE);
    romData.fill(0); // Initialize with zeros (blank characters)

    for (let charCode = 0; charCode < NUM_CHARS; charCode++) {
        const bitmap = fontBitmaps[charCode];
        if (bitmap && bitmap.length === CHAR_HEIGHT) { // Use imported CHAR_HEIGHT
            const baseAddress = charCode * CHAR_HEIGHT; // Use imported CHAR_HEIGHT
            for (let row = 0; row < CHAR_HEIGHT; row++) { // Use imported CHAR_HEIGHT
                romData[baseAddress + row] = bitmap[row];
            }
        } else {
            // Optional: Log a warning for missing characters
            // console.warn(`Bitmap data missing or invalid for character code 0x${charCode.toString(16)}`);
            // The ROM will contain zeros for this character's space.
        }
    }
    console.log(`Generated ASCII Font ROM data (${FONT_ROM_SIZE} bytes).`);
    return romData;
}

// Generate and export the Font ROM data
export const asciiFontRomData = generateAsciiFontRom();

// Example usage (optional, for testing):
/*
import { asciiFontRomData } from './roms/ascii.js';
import { FONT_ROM_START_ADDRESS, CHAR_HEIGHT } from '../constants.js'; // Import constants for example

// In your CPU or main setup:
cpu.memory.loadProgram(asciiFontRomData, FONT_ROM_START_ADDRESS);
console.log(`ASCII Font ROM loaded at 0x${FONT_ROM_START_ADDRESS.toString(16)}`);

// To read the bitmap data for 'A' (0x41) from the ROM:
const charCodeA = 0x41;
const bitmapAddressA = FONT_ROM_START_ADDRESS + (charCodeA * CHAR_HEIGHT);
let bitmapA = [];
for(let i=0; i < CHAR_HEIGHT; i++) {
    bitmapA.push(cpu.memory.read(bitmapAddressA + i));
}
console.log(`Bitmap for 'A' at 0x${bitmapAddressA.toString(16)}:`, bitmapA.map(b => '0b'+b.toString(2).padStart(8,'0')));
*/
